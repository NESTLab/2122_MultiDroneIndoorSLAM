#include <robot_state_machine.h>

RobotState::RobotState(uint64_t un_id, const std::string& str_name, ros::NodeHandle &nh) :
      // m_pcTeam(nullptr), 
      m_unId(un_id), m_strName(str_name) 
{
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////// I D L E   S T A T E   C L A S S ////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Idle::entryPoint()
{
   return true;
}

bool Idle::isDone()
{
   return true;
}


TEAM_STATES Idle::transition() 
{
  return GO_TO_EXPLORE;
}

void Idle::step()
{
  ROS_INFO("Step for Idle");
}

void Idle::exitPoint() 
{
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////// G O   T O   E X P L O R E   S T A T E   C L A S S ////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool GoToExplore::entryPoint()
{
   return true;
}

bool GoToExplore::isDone()
{
   return true;
}


TEAM_STATES GoToExplore::transition() 
{
  return EXPLORE;
}

void GoToExplore::step()
{
  ROS_INFO("Step for GoToExplore");
}

void GoToExplore::exitPoint() 
{
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////// E X P L O R E   S T A T E   C L A S S ////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Explore::entryPoint()
{
   return true;
}

bool Explore::isDone()
{
   return true;
}


TEAM_STATES Explore::transition() 
{
  return GO_TO_MEET;
}

void Explore::step()
{
  ROS_INFO("Step for Explore");
}

void Explore::exitPoint() 
{
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////// G O   T O   M E E T   S T A T E   C L A S S ////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool GoToMeet::entryPoint()
{
   return true;
}

bool GoToMeet::isDone()
{
   return true;
}


TEAM_STATES GoToMeet::transition() 
{
  return MEET;
}

void GoToMeet::step()
{
  ROS_INFO("Step for GoToMeet");
}

void GoToMeet::exitPoint() 
{
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////// M E E T   S T A T E   C L A S S ////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Meet::entryPoint()
{
   return true;
}

bool Meet::isDone()
{
   return true;
}

TEAM_STATES Meet::transition() 
{
  return IDLE;
}

void Meet::step()
{
  ROS_INFO("Step for Meet");
}

void Meet::exitPoint() 
{
}
